AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
    sam-app

    Sample SAM Template for sam-app converted into S3 access log processing function
    After you enable server access logging, it might take a few hours before the logs are delivered to the target bucket. 

Parameters:

    IAMUsername:
        Description: Name of the IAM user who will be the administrator of the KMS key we create. This user will be able to encrypt values and manage the key.
        Type: String
        Default: root

    EsIndex:
        Type: String
        Default: "cloudwatch-logs"
    
    EsDocType: 
        Type: String
        Default: s3-log
    
    EsEndpoint: 
        Type: String
        Default: myendpoint
    
    # # Name of your Elasticsearch cluster as it appears in the AWS console
    # EsDomainName:
    #     Type: String
    #     Default: my-cluster
        
Resources:

    accesslogstoawscloud:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            Role: !GetAtt accesslogstoawscloudrole.Arn
            CodeUri: accesslogstoawscloud/
            Handler: accesslogstoawscloud.lambda_handler
            Runtime: python3.7
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    AWS_XRAY_TRACING_NAME: 'accesslogstoawscloud'
                    ES_ENDPOINT: !Ref EsEndpoint
                    ES_REGION: !Sub "${AWS::Region}"
                    ES_INDEX: !Ref EsIndex
                    ES_DOC_TYPE: !Ref EsDocType
                    parent_stack_name: !Sub '${AWS::StackName}'
                    enable_logging: 'True'
            # Events:
            #     S3AccessLogEvent:
            #         Type: S3
            #         Properties:
            #             Bucket: 
            #                 Ref: accesslogbucket
            #             Events: s3:ObjectCreated:*


    accesslogstoawscloudrole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Action: ['sts:AssumeRole']
                      Effect: Allow
                      Principal:
                        Service: [lambda.amazonaws.com]

    accesslogstoawscloudpolicy: 
        Type: "AWS::IAM::Policy"
        Properties: 
            PolicyName: !Sub "${AWS::StackName}-accesslogstoawscloudpolicy"
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - Effect: "Allow"
                      Action: 
                            - "s3:*"
                            - "ssm:*"
                            - "kms:*"
                            - "logs:*"
                      Resource: "*"
            Roles: 
                - Ref: "accesslogstoawscloudrole"





    accesslogstoawscloudInvokePermission:
        Type: 'AWS::Lambda::Permission'
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !Ref accesslogstoawscloud
            Principal: sns.amazonaws.com

    accesslogstoelasticcloudInvokePermission:
        Type: 'AWS::Lambda::Permission'
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !Ref accesslogstoelasticcloud
            Principal: sns.amazonaws.com

    SnsTopic:
        Type: 'AWS::SNS::Topic'
        Properties:
            # TopicName: !Ref SnsTopicName
            Subscription:
                - Protocol: lambda
                  Endpoint: !GetAtt accesslogstoawscloud.Arn
                - Protocol: lambda
                  Endpoint: !GetAtt accesslogstoelasticcloud.Arn


    SNSTopicPolicy:
        Type: 'AWS::SNS::TopicPolicy'
        Properties:
            Topics:
                - !Ref SnsTopic
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Action: 'sns:Publish'
                      Resource: !Ref SnsTopic
                      Condition:
                        ArnLike:
                            aws:SourceArn: !Sub "arn:aws:s3:::${accesslogbucket}"
                      Principal:
                        AWS: '*'

    # https://aws.amazon.com/premiumsupport/knowledge-center/unable-validate-destination-s3/
    accesslogbucket:
        Type: 'AWS::S3::Bucket'
        DependsOn: SNSTopicPolicy
        Properties:
            # BucketName: !Ref S3BucketName
            NotificationConfiguration:
                TopicConfigurations:
                    - Topic: !Ref SnsTopic
                      Event: 's3:ObjectCreated:*'
                        # Filter:
                        # S3Key:
                        #     Rules:
                        #     - Name: prefix
                        #         Value: 'uploads/sns/'
                # LambdaConfigurations:
                    # - Function: !GetAtt FanoutFunction.Arn
                    #     Event: 's3:ObjectCreated:*'
                    #     Filter:
                    #     S3Key:
                    #         Rules:
                    #         - Name: prefix
                    #             Value: 'uploads/lambda/'












# ------------------------

    accesslogstoelasticcloud:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            Role: !GetAtt accesslogstoelasticcloudrole.Arn
            CodeUri: accesslogstoelasticcloud/
            Handler: accesslogstoelasticcloud.lambda_handler
            Runtime: python3.7
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    cloud_id: '-'
                    http_auth_username: '-'
                    http_auth_password: '-'
                    index_name: '-'
                    AWS_XRAY_TRACING_NAME: 'accesslogstoelasticcloud'
                    enable_logging: 'True'
            # Events:
            #     S3AccessLogEvent:
            #         Type: S3
            #         Properties:
            #             Bucket: 
            #                 Ref: accesslogbucket
            #             Events: s3:ObjectCreated:*

    accesslogstoelasticcloudrole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Action: ['sts:AssumeRole']
                      Effect: Allow
                      Principal:
                        Service: [lambda.amazonaws.com]

    accesslogstoelasticcloudpolicy: 
        Type: "AWS::IAM::Policy"
        Properties: 
            PolicyName: !Sub "${AWS::StackName}-accesslogstoelasticcloudpolicy"
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - Effect: "Allow"
                      Action: 
                            - "s3:*"
                            - "ssm:*"
                            - "kms:*"
                            - "logs:*"
                      Resource: "*"
            Roles: 
                - Ref: "accesslogstoelasticcloudrole"


    



    ParameterStoreEncryptionKeyAlias:
        Type: AWS::KMS::Alias
        Properties:
            AliasName: 'alias/ParameterStoreEncryptionKey'
            TargetKeyId: !Ref ParameterStoreEncryptionKey

    ParameterStoreEncryptionKey:
        Type: AWS::KMS::Key
        Properties:
            Description: 'Encryption key for secret config values for S3 Access log Lambda function'
            Enabled: True
            EnableKeyRotation: False
            KeyPolicy:
                Version: '2012-10-17'
                Id: 'key-default-1'
                Statement:
                  -
                    Sid: 'Allow administration of the key & encryption of new values'
                    Effect: Allow
                    Principal:
                      AWS:
                        - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                    Action:
                      - 'kms:Create*'
                      - 'kms:Encrypt'
                      - 'kms:Describe*'
                      - 'kms:Enable*'
                      - 'kms:List*'
                      - 'kms:Put*'
                      - 'kms:Update*'
                      - 'kms:Revoke*'
                      - 'kms:Disable*'
                      - 'kms:Get*'
                      - 'kms:Delete*'
                      - 'kms:ScheduleKeyDeletion'
                      - 'kms:CancelKeyDeletion'
                    Resource: '*'
                  -
                    Sid: 'Allow use of the key'
                    Effect: Allow
                    Principal:
                      AWS: !GetAtt accesslogstoelasticcloudrole.Arn
                    Action:
                      - 'kms:Encrypt'
                      - 'kms:Decrypt'
                      - 'kms:ReEncrypt*'
                      - 'kms:GenerateDataKey*'
                      - 'kms:DescribeKey'
                    Resource: '*'

    
    cleanupBucketOnDelete:
        DependsOn: cleanupBucketOnDeleteFunction
        Type: Custom::cleanupbucket
        Properties:
            ServiceToken: 
                Fn::GetAtt: 
                  - "cleanupBucketOnDeleteFunction"
                  - "Arn"
            BucketName: !Sub '${accesslogbucket.Arn}'

    
    cleanupBucketOnDeleteFunction:
        DependsOn: accesslogbucket
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            Role: !GetAtt cleanupBucketOnDeleteLambdaRole.Arn
            CodeUri: cleanupBucketOnDelete/
            Handler: cleanupBucketOnDelete.lambda_handler
            Runtime: python3.7
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    s3_bucket_name: !Ref accesslogbucket
            Timeout: 60
            Description: cleanup Bucket on Delete Lambda Lambda function.


    cleanupBucketOnDeleteLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Action: ['sts:AssumeRole']
                      Effect: Allow
                      Principal:
                        Service: [lambda.amazonaws.com]


    cleanupBucketOnDeleteLambdaRolePolicy: 
        Type: "AWS::IAM::Policy"
        Properties: 
            PolicyName: !Sub "${AWS::StackName}-cleanupBucketOnDeleteLambdaRolePolicy"
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - Effect: "Allow"
                      Action: 
                            - "s3:*"
                            - "logs:*"
                      Resource: "*"
                    - Effect: "Deny"
                      Action: 
                            - "s3:DeleteBucket"
                      Resource: "*"
            Roles: 
                - Ref: "cleanupBucketOnDeleteLambdaRole"


    customResources:
        DependsOn: customResourcesLambdaRolePolicy
        Type: Custom::customresources
        Properties:
            ServiceToken: 
                Fn::GetAtt: 
                  - "customResourcesFunction"
                  - "Arn"
            parent_stack_name: !Sub '${AWS::StackName}'

    
    customResourcesFunction:
        Type: AWS::Serverless::Function 
        Properties:
            Role: !GetAtt customResourcesLambdaRole.Arn
            CodeUri: customresources/
            Handler: customresources.lambda_handler
            Runtime: python3.7
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    parent_stack_name: !Sub '${AWS::StackName}'
                    ParameterStoreEncryptionKey: !Sub '${ParameterStoreEncryptionKey}'
            Timeout: 60
            Description: Create and Delete custom resources Lambda function.


    customResourcesLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Action: ['sts:AssumeRole']
                      Effect: Allow
                      Principal:
                        Service: [lambda.amazonaws.com]


    customResourcesLambdaRolePolicy: 
        DependsOn: ParameterStoreEncryptionKey
        Type: "AWS::IAM::Policy"
        Properties: 
            PolicyName: !Sub "${AWS::StackName}-customResourcesLambdaRolePolicy"
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - Effect: "Allow"
                      Action: 
                            - "s3:*"
                            - "ssm:*"
                            - "logs:*"
                            - "kms:*"
                      Resource: "*"
            Roles: 
                - Ref: "customResourcesLambdaRole"



    
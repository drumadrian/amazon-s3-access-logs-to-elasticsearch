AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
    sam-app

    SAM Template for amazon-s3-access-logs-to-elasticsearch S3 access log processing function
    After you enable server access logging, it might take an hour or more before the logs are delivered to the target bucket. 


Parameters:

    EsIndex:
        Type: String
        Default: "accesslogstoawscloud"
    
    EsDocType: 
        Type: String
        Default: s3-log
    
    EsEndpoint: 
        Type: String
        Default: myendpoint
    
    
Resources:

####################################################################################################################################################################################################################################################################################################################################################################################################
# accesslogstoawscloud
####################################################################################################################################################################################################################################################################################################################################################################################################
    accesslogstoawscloud:
        DependsOn: accesslogstoawscloudpolicy
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            Role: !GetAtt accesslogstoawscloudrole.Arn
            CodeUri: accesslogstoawscloud/
            Handler: accesslogstoawscloud.lambda_handler
            Runtime: python3.7
            Tracing: Active
            Timeout: 10
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    ES_REGION: !Sub "${AWS::Region}"
                    host: 'example.us-west-2.es.amazonaws.com'
                    index_name: 'accesslogstoawscloud'
                    AWS_XRAY_TRACING_NAME: 'accesslogstoawscloud'
                    enable_logging: 'True'

    accesslogstoawscloudrole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Action: ['sts:AssumeRole']
                      Effect: Allow
                      Principal:
                        Service: [lambda.amazonaws.com]

    accesslogstoawscloudpolicy: 
        Type: "AWS::IAM::Policy"
        Properties: 
            PolicyName: !Sub "${AWS::StackName}-accesslogstoawscloudpolicy"
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - Effect: "Allow"
                      Action: 
                            - "s3:*"
                            - "logs:*"
                            - "xray:*"
                            - "es:*"
                      Resource: "*"
            Roles: 
                - Ref: "accesslogstoawscloudrole"


####################################################################################################################################################################################################################################################################################################################################################################################################
# accesslogstoelasticcloud
####################################################################################################################################################################################################################################################################################################################################################################################################
    accesslogstoelasticcloud:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            Role: !GetAtt accesslogstoelasticcloudrole.Arn
            CodeUri: accesslogstoelasticcloud/
            Handler: accesslogstoelasticcloud.lambda_handler
            Runtime: python3.7
            Tracing: Active
            Timeout: 10
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    cloud_id: '-'
                    http_auth_username: 'elastic'
                    http_auth_password: '-'
                    index_name: 'accesslogstoelasticcloud'
                    AWS_XRAY_TRACING_NAME: 'accesslogstoelasticcloud'
                    enable_logging: 'True'
                    parent_stack_name: !Sub '${AWS::StackName}'

    accesslogstoelasticcloudrole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Action: ['sts:AssumeRole']
                      Effect: Allow
                      Principal:
                        Service: [lambda.amazonaws.com]

    accesslogstoelasticcloudpolicy: 
        Type: "AWS::IAM::Policy"
        Properties: 
            PolicyName: !Sub "${AWS::StackName}-accesslogstoelasticcloudpolicy"
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - Effect: "Allow"
                      Action: 
                            - "s3:*"
                            - "ssm:*"
                            - "kms:*"
                            - "logs:*"
                            - "xray:*"
                      Resource: "*"
            Roles: 
                - Ref: "accesslogstoelasticcloudrole"


####################################################################################################################################################################################################################################################################################################################################################################################################
# invokeonnotification
####################################################################################################################################################################################################################################################################################################################################################################################################
    invokeonnotification:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            Role: !GetAtt invokeonnotificationrole.Arn
            CodeUri: invokeonnotification/
            Handler: invokeonnotification.lambda_handler
            Runtime: python3.7
            Tracing: Active
            Timeout: 10
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    labmdafunction1: !GetAtt accesslogstoawscloud.Arn
                    labmdafunction2: !GetAtt accesslogstoelasticcloud.Arn
                    AWS_XRAY_TRACING_NAME: 'invokeonnotification'
                    enable_logging: 'True'

    invokeonnotificationrole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Action: ['sts:AssumeRole']
                      Effect: Allow
                      Principal:
                        Service: [lambda.amazonaws.com]

    invokeonnotificationpolicy: 
        Type: "AWS::IAM::Policy"
        Properties: 
            PolicyName: !Sub "${AWS::StackName}-invokeonnotificationpolicy"
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - Effect: "Allow"
                      Action: 
                            - "lambda:*"
                            - "logs:*"
                            - "xray:*"
                      Resource: "*"
            Roles: 
                - Ref: "invokeonnotificationrole"


####################################################################################################################################################################################################################################################################################################################################################################################################
# Lambda Permissions
####################################################################################################################################################################################################################################################################################################################################################################################################
    accesslogstoawscloudInvokePermission:
        Type: 'AWS::Lambda::Permission'
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !Ref accesslogstoawscloud
            Principal: !Sub ${AWS::AccountId}

    accesslogstoelasticcloudInvokePermission:
        Type: 'AWS::Lambda::Permission'
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !Ref accesslogstoelasticcloud
            Principal: !Sub ${AWS::AccountId}

    invokeonnotificationInvokePermission:
        Type: 'AWS::Lambda::Permission'
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !Ref invokeonnotification
            Principal: !Sub ${AWS::AccountId}


####################################################################################################################################################################################################################################################################################################################################################################################################
# accesslogbucket
####################################################################################################################################################################################################################################################################################################################################################################################################
    accesslogbucket:
        Type: 'AWS::S3::Bucket'
        Properties:
            # BucketName: !Ref S3BucketName
            NotificationConfiguration:
                # TopicConfigurations:
                #     - Topic: !Ref SnsTopic
                #       Event: 's3:ObjectCreated:*'
                        # Filter:
                        # S3Key:
                        #     Rules:
                        #     - Name: prefix
                        #         Value: 'uploads/sns/'
                LambdaConfigurations:
                    - Function: !GetAtt invokeonnotification.Arn
                      Event: 's3:ObjectCreated:*'


####################################################################################################################################################################################################################################################################################################################################################################################################
# KMS Key and Alias and Resources for secure credentials
####################################################################################################################################################################################################################################################################################################################################################################################################
    ParameterStoreEncryptionKeyAlias:
        Type: AWS::KMS::Alias
        Properties:
            AliasName: 'alias/accesslogstoelasticcloudEncryptionKey'
            TargetKeyId: !Ref ParameterStoreEncryptionKey

    ParameterStoreEncryptionKey:
        Type: AWS::KMS::Key
        Properties:
            Description: 'Encryption key for secret config values for S3 Access log Lambda function'
            Enabled: True
            EnableKeyRotation: False
            KeyPolicy:
                Version: '2012-10-17'
                Id: 'key-default-1'
                Statement:
                  -
                    Sid: 'Allow administration of the key & encryption of new values'
                    Effect: Allow
                    Principal:
                      AWS:
                        - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                    Action:
                      - 'kms:Create*'
                      - 'kms:Encrypt'
                      - 'kms:Describe*'
                      - 'kms:Enable*'
                      - 'kms:List*'
                      - 'kms:Put*'
                      - 'kms:Update*'
                      - 'kms:Revoke*'
                      - 'kms:Disable*'
                      - 'kms:Get*'
                      - 'kms:Delete*'
                      - 'kms:ScheduleKeyDeletion'
                      - 'kms:CancelKeyDeletion'
                    Resource: '*'
                  -
                    Sid: 'Allow use of the key'
                    Effect: Allow
                    Principal:
                      AWS:
                        - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                    #   AWS: !GetAtt accesslogstoelasticcloudrole.Arn
                    Action:
                      - 'kms:Encrypt'
                      - 'kms:Decrypt'
                      - 'kms:ReEncrypt*'
                      - 'kms:GenerateDataKey*'
                      - 'kms:DescribeKey'
                    Resource: '*'

    customResources:
        DependsOn: customResourcesLambdaRolePolicy
        Type: Custom::customresources
        Properties:
            ServiceToken: 
                Fn::GetAtt: 
                  - "customResourcesFunction"
                  - "Arn"
            parent_stack_name: !Sub '${AWS::StackName}'
    
    customResourcesFunction:
        Type: AWS::Serverless::Function 
        Properties:
            Role: !GetAtt customResourcesLambdaRole.Arn
            CodeUri: customresources/
            Handler: customresources.lambda_handler
            Runtime: python3.7
            Timeout: 60
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    parent_stack_name: !Sub '${AWS::StackName}'
                    ParameterStoreEncryptionKey: !Sub '${ParameterStoreEncryptionKey}'
            Description: Create and Delete custom resources Lambda function.

    customResourcesLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Action: ['sts:AssumeRole']
                      Effect: Allow
                      Principal:
                        Service: [lambda.amazonaws.com]

    customResourcesLambdaRolePolicy: 
        DependsOn: ParameterStoreEncryptionKey
        Type: "AWS::IAM::Policy"
        Properties: 
            PolicyName: !Sub "${AWS::StackName}-customResourcesLambdaRolePolicy"
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - Effect: "Allow"
                      Action: 
                            - "s3:*"
                            - "ssm:*"
                            - "logs:*"
                            - "kms:*"
                      Resource: "*"
            Roles: 
                - Ref: "customResourcesLambdaRole"


####################################################################################################################################################################################################################################################################################################################################################################################################
# Cleanup Bucket on Delete Resources
####################################################################################################################################################################################################################################################################################################################################################################################################

    cleanupBucketOnDelete:
        DependsOn: cleanupBucketOnDeleteFunction
        Type: Custom::cleanupbucket
        Properties:
            ServiceToken: 
                Fn::GetAtt: 
                  - "cleanupBucketOnDeleteFunction"
                  - "Arn"
            BucketName: !Sub '${accesslogbucket.Arn}'

    cleanupBucketOnDeleteFunction:
        DependsOn: accesslogbucket
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            Role: !GetAtt cleanupBucketOnDeleteLambdaRole.Arn
            CodeUri: cleanupBucketOnDelete/
            Handler: cleanupBucketOnDelete.lambda_handler
            Runtime: python3.7
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    s3_bucket_name: !Ref accesslogbucket
            Timeout: 300
            Description: cleanup Bucket on Delete Lambda Lambda function.

    cleanupBucketOnDeleteLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Action: ['sts:AssumeRole']
                      Effect: Allow
                      Principal:
                        Service: [lambda.amazonaws.com]

    cleanupBucketOnDeleteLambdaRolePolicy: 
        Type: "AWS::IAM::Policy"
        Properties: 
            PolicyName: !Sub "${AWS::StackName}-cleanupBucketOnDeleteLambdaRolePolicy"
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                    - Effect: "Allow"
                      Action: 
                            - "s3:*"
                            - "logs:*"
                      Resource: "*"
                    - Effect: "Deny"
                      Action: 
                            - "s3:DeleteBucket"
                      Resource: "*"
            Roles: 
                - Ref: "cleanupBucketOnDeleteLambdaRole"


    